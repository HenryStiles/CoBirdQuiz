const fs = require('fs');
const path = require('path');
const vm = require('vm');
const util = require('util');

const webAppDataSourcePath = path.join(__dirname, 'BirdQuizData.js');
const reactAppDataSourcePath = path.join(__dirname, 'react-bird-quiz', 'src', 'BirdQuizData.js');

console.log(`Reading from: ${webAppDataSourcePath}`);
console.log(`Writing to:   ${reactAppDataSourcePath}`);

try {
    // 1. Read the source file content.
    const sourceContent = fs.readFileSync(webAppDataSourcePath, 'utf8');

    // 2. Safely execute the script in a sandboxed context to get the data.
    // This is safer than using eval().
    const script = new vm.Script(sourceContent);
    const context = vm.createContext({});
    script.runInContext(context);
    const birdData = context.birdQuizData;

    if (!birdData) {
        throw new Error('Could not extract birdQuizData from the source file.');
    }

    // 3. Format the data as a JavaScript object literal string for readability.
    const formattedData = JSON.stringify(birdData, null, 2);

    // 4. Construct the new file content with an ES module export.
    const newFileContent = `// Data ported from ${path.basename(webAppDataSourcePath)}
// This file is generated by a script. Do not edit manually.

const birdQuizData = ${formattedData};

export default birdQuizData;
`;

    // 5. Write the new content to the React app's data file.
    fs.writeFileSync(reactAppDataSourcePath, newFileContent, 'utf8');

    console.log(`\nSuccessfully converted data and saved to ${reactAppDataSourcePath}`);
} catch (error) {
    console.error('\nAn error occurred during data conversion:', error);
}